[
  {
    "role": "user",
    "content": [
      {
        "tool_use_id": "toolu_01BwGusn8wCsb6cAdrTza7BM",
        "type": "tool_result",
        "content": "     1→import {\n     2→  Platform,\n     3→  Pressable,\n     4→  StyleSheet,\n     5→  Text,\n     6→  View,\n     7→  FlatList,\n     8→} from \"react-native\";\n     9→import { useNavigation } from \"@react-navigation/native\";\n    10→import PropTypes from \"prop-types\";\n    11→\n    12→import { GlobalStyles } from \"../../constants/styles\";\n    13→import { isToday, toShortFormat } from \"../../util/date\";\n    14→import { Ionicons } from \"@expo/vector-icons\";\n    15→import { Category, getCatSymbolMMKV } from \"../../util/category\";\n    16→import { useContext, useCallback, useState, useMemo, memo } from \"react\";\n    17→import { TripContext } from \"../../store/trip-context\";\n    18→import { formatExpenseWithCurrency } from \"../../util/string\";\n    19→import React from \"react\";\n    20→\n    21→//Localization\n    22→import * as Localization from \"expo-localization\";\n    23→import { I18n } from \"i18n-js\";\n    24→import { en, de, fr, ru } from \"../../i18n/supportedLanguages\";\n    25→import { DateTime } from \"luxon\";\n    26→import { UserContext } from \"../../store/user-context\";\n    27→import ExpenseCountryFlag from \"./ExpenseCountryFlag\";\n    28→import { SettingsContext } from \"../../store/settings-context\";\n    29→import { useEffect } from \"react\";\n    30→import * as Haptics from \"expo-haptics\";\n    31→import { ExpenseData } from \"../../util/expense\";\n    32→import { useRef } from \"react\";\n    33→import { constantScale, dynamicScale } from \"../../util/scalingUtil\";\n    34→import { OrientationContext } from \"../../store/orientation-context\";\n    35→const i18n = new I18n({ en, de, fr, ru });\n    36→i18n.locale = ((Localization.getLocales()[0]&&Localization.getLocales()[0].languageCode)?Localization.getLocales()[0].languageCode.slice(0,2):'en');\n    37→i18n.enableFallback = true;\n    38→\n    39→const IconSize = dynamicScale(28, false, 0.5);\n    40→\n    41→function ExpenseItem(props): JSX.Element {\n    42→  const { showSumForTravellerName, filtered } = props;\n    43→  const { setSelectable } = props;\n    44→  const {\n    45→    id,\n    46→    description,\n    47→    amount,\n    48→    category,\n    49→    country,\n    50→    whoPaid,\n    51→    currency,\n    52→    calcAmount,\n    53→    splitList,\n    54→    iconName,\n    55→    isSpecialExpense,\n    56→  }: ExpenseData = props;\n    57→  let { date } = props;\n    58→  const navigation = useNavigation();\n    59→  const { tripCurrency } = useContext(TripContext);\n    60→  const { periodName, catIconNames } = useContext(UserContext);\n    61→  const rate = calcAmount / amount;\n    62→  // const { orientation, width, height } = useContext(OrientationContext);\n    63→  // console.log(\n    64→  //   orientation,\n    65→  //   width,\n    66→  //   height,\n    67→  //   \"const100:\",\n    68→  //   constantScale(100, 0.5).toFixed(2),\n    69→  //   \"dynamic100:\",\n    70→  //   dynamicScale(100, true, 0.5).toFixed(2)\n    71→  // );\n    72→\n    73→  const calculateSumForTraveller = useCallback(() => {\n    74→    if (\n    75→      !showSumForTravellerName ||\n    76→      typeof showSumForTravellerName !== \"string\" ||\n    77→      showSumForTravellerName.length < 1 ||\n    78→      !splitList ||\n    79→      splitList.length === 0\n    80→    ) {\n    81→      return { calcTravellerSumString: null, travellerSumString: null };\n    82→    }\n    83→\n    84→    let tempCalcSum = 0;\n    85→    let tempSum = 0;\n    86→\n    87→    splitList.forEach((split) => {\n    88→      if (split.userName === showSumForTravellerName) {\n    89→        tempCalcSum += Number(split.amount) * rate;\n    90→        tempSum += Number(split.amount);\n    91→      }\n    92→    });\n    93→\n    94→    const calcTravellerSumString = formatExpenseWithCurrency(\n    95→      tempCalcSum,\n    96→      tripCurrency\n    97→    );\n    98→    const travellerSumString = formatExpenseWithCurrency(tempSum, currency);\n    99→\n   100→    return { calcTravellerSumString, travellerSumString };\n   101→  }, [showSumForTravellerName, splitList, rate, tripCurrency, currency]);\n   102→\n   103→  const { calcTravellerSumString, travellerSumString } = useMemo(\n   104→    calculateSumForTraveller,\n   105→    [calculateSumForTraveller]\n   106→  );\n   107→  const calcAmountString =\n   108→    calcTravellerSumString ??\n   109→    formatExpenseWithCurrency(calcAmount, tripCurrency);\n   110→\n   111→  const amountString =\n   112→    travellerSumString ?? formatExpenseWithCurrency(amount, currency);\n   113→\n   114→  const [catSymbol, setCatSymbol] = useState(iconName ? iconName : \"\");\n   115→  useEffect(() => {\n   116→    async function setCatSymbolAsync() {\n   117→      const listOfCats = catIconNames;\n   118→      if (listOfCats) {\n   119→        const cat: Category = listOfCats.find(({ cat }) => cat === category);\n   120→        if (cat?.icon) {\n   121→          setCatSymbol(cat.icon);\n   122→          return;\n   123→        }\n   124→      }\n   125→      const storedIcon = getCatSymbolMMKV(category);\n   126→      setCatSymbol(storedIcon);\n   127→    }\n   128→    setCatSymbolAsync();\n   129→    // need to disable eslint because of array in deps => rerender every tick problem\n   130→    // eslint-disable-next-line react-hooks/exhaustive-deps\n   131→  }, [category]);\n   132→\n   133→  const sameCurrency = tripCurrency === currency;\n   134→\n   135→  const { settings } = useContext(SettingsContext);\n   136→  const settingShowFlags = settings.showFlags;\n   137→  const settingShowWhoPaid = settings.showWhoPaid;\n   138→  const settingHideSpecialExpenses = settings.hideSpecialExpenses;\n   139→  const hideSpecial = settingHideSpecialExpenses && isSpecialExpense;\n   140→\n   141→  const navigateToExpense = useCallback(async () => {\n   142→    if (!id) {\n   143→      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n   144→      return;\n   145→    }\n   146→    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n   147→    navigation.navigate(\"ManageExpense\", {\n   148→      expenseId: id,\n   149→    });\n   150→  }, [id, navigation]);\n   151→  const originalCurrencyJSX = useMemo(\n   152→    () =>\n   153→      !sameCurrency ? (\n   154→        <>\n   155→          <Text\n   156→            style={[\n   157→              styles.originalCurrencyText,\n   158→              hideSpecial && {\n   159→                color: GlobalStyles.colors.textHidden,\n   160→              },\n   161→            ]}\n   162→          >\n   163→            {amountString}\n   164→          </Text>\n   165→        </>\n   166→      ) : (\n   167→        <></>\n   168→      ),\n   169→    [sameCurrency, amountString, hideSpecial]\n   170→  );\n   171→\n   172→  const splitListHasNonZeroEntries = splitList?.some(\n   173→    (item) => item.amount !== 0\n   174→  );\n   175→  const islongListOrNull =\n   176→    splitList && splitList?.length > 3 && splitListHasNonZeroEntries\n   177→      ? splitList.slice(0, 2)\n   178→      : null;\n   179→  const longList = islongListOrNull ? [...islongListOrNull] : null;\n   180→  longList?.push({ userName: `+${splitList?.length - 2}`, amount: 0 });\n   181→\n   182→  const sharedList = useCallback(\n   183→    () =>\n   184→      splitList && splitList?.length > 0 ? (\n   185→        <View style={{ overflow: \"visible\" }}>\n   186→          <FlatList\n   187→            scrollEnabled={false}\n   188→            data={\n   189→              longList\n   190→                ? longList.sort((a, b) => {\n   191→                    // if username === + put last\n   192→                    if (a.userName === \"+\") return 1;\n   193→                    if (b.userName === \"+\") return -1;\n   194→                    // put the whopaid user first, then alphabetically\n   195→                    if (a.userName === whoPaid) return -1;\n   196→                    if (b.userName === whoPaid) return 1;\n   197→                    return a.userName.localeCompare(b.userName);\n   198→                  })\n   199→                : splitList.sort((a, b) => {\n   200→                    // if username === + put last\n   201→                    if (a.userName === \"+\") return 1;\n   202→                    if (b.userName === \"+\") return -1;\n   203→                    // put the whopaid user first, then alphabetically\n   204→                    if (a.userName === whoPaid) return -1;\n   205→                    if (b.userName === whoPaid) return 1;\n   206→                    return a.userName.localeCompare(b.userName);\n   207→                  })\n   208→            }\n   209→            horizontal={true}\n   210→            renderItem={({ item }) => {\n   211→              // if username == whopaid set color to primary\n   212→              const userPaid = item.userName === whoPaid;\n   213→              return (\n   214→                <View\n   215→                  style={[\n   216→                    styles.avatar,\n   217→                    GlobalStyles.shadow,\n   218→                    { marginBottom: dynamicScale(16, true) },\n   219→                    userPaid && styles.avatarPaid,\n   220→                  ]}\n   221→                >\n   222→                  <Text style={styles.avatarText}>\n   223→                    {item.userName.slice(0, 1)}\n   224→                  </Text>\n   225→                </View>\n   226→              );\n   227→            }}\n   228→            contentContainerStyle={styles.avatarContainer}\n   229→            keyExtractor={(item) => {\n   230→              return item.userName;\n   231→            }}\n   232→          ></FlatList>\n   233→        </View>\n   234→      ) : (\n   235→        <View style={styles.avatarContainer}>\n   236→          <View style={[styles.avatar, styles.avatarPaid, GlobalStyles.shadow]}>\n   237→            <Text style={styles.avatarText}>{whoPaid?.slice(0, 1)}</Text>\n   238→          </View>\n   239→        </View>\n   240→      ),\n   241→    [longList?.length, splitList?.length, whoPaid]\n   242→  );\n   243→\n   244→  if (typeof date === \"string\") date = new Date(date);\n   245→  const dateString = useRef(\"\");\n   246→  // if date is today, show \"Today\" instead of date\n   247→  // if periodName is \"today\" dont show \"today\"\n   248→  const todayString = useCallback(\n   249→    () => (periodName === \"day\" ? \"\" : `${i18n.t(\"today\")} `),\n   250→    [periodName]\n   251→  );\n   252→\n   253→  const configureDateString = useCallback(() => {\n   254→    dateString.current = date ? date : \"no date\";\n   255→    const hourAndMinuteString = DateTime.fromJSDate(date).toFormat(\"HH:mm\");\n   256→    if (isToday(new Date(date))) {\n   257→      dateString.current = `${todayString()}${hourAndMinuteString}`;\n   258→    } else dateString.current = toShortFormat(date);\n   259→  }, [date, todayString]);\n   260→  configureDateString();\n   261→\n   262→  const { isLandscape } = useContext(OrientationContext);\n   263→\n   264→  // if (!id) return <></>;\n   265→  return (\n   266→    <View style={hideSpecial && { opacity: 0.75 }}>\n   267→      <Pressable\n   268→        onPress={navigateToExpense}\n   269→        onLongPress={() => {\n   270→          if (setSelectable === undefined) return;\n   271→          setSelectable(true);\n   272→        }}\n   273→        style={({ pressed }) => pressed && GlobalStyles.pressed}\n   274→      >\n   275→        <View\n   276→          style={[\n   277→            styles.expenseItem,\n   278→            {\n   279→              height: constantScale(55),\n   280→              paddingLeft: dynamicScale(16),\n   281→              ...Platform.select({\n   282→                ios: {\n   283→                  paddingVertical: dynamicScale(8, true),\n   284→                },\n   285→                android: {\n   286→                  paddingVertical: dynamicScale(6, true),\n   287→                },\n   288→              }),\n   289→            },\n   290→            isLandscape && {\n   291→              height: dynamicScale(100, true),\n   292→            },\n   293→          ]}\n   294→        >\n   295→          <View\n   296→            style={[styles.iconContainer, { height: constantScale(44, 0.5) }]}\n   297→          >\n   298→            <Ionicons\n   299→              name={catSymbol}\n   300→              size={IconSize}\n   301→              color={\n   302→                hideSpecial\n   303→                  ? GlobalStyles.colors.textHidden\n   304→                  : GlobalStyles.colors.textColor\n   305→              }\n   306→            />\n   307→          </View>\n   308→          <View style={styles.leftItem}>\n   309→            <Text\n   310→              maxFontSizeMultiplier={1.2}\n   311→              numberOfLines={1}\n   312→              ellipsizeMode=\"tail\"\n   313→              style={[\n   314→                styles.textBase,\n   315→                styles.description,\n   316→                settingShowFlags && settingShowWhoPaid && { width: \"90%\" },\n   317→                hideSpecial && { color: GlobalStyles.colors.textHidden },\n   318→              ]}\n   319→            >\n   320→              {description}\n   321→            </Text>\n   322→            <Text\n   323→              maxFontSizeMultiplier={1}\n   324→              style={[\n   325→                styles.textBase,\n   326→                styles.secondaryText,\n   327→                hideSpecial && { color: GlobalStyles.colors.textHidden },\n   328→              ]}\n   329→            >\n   330→              {dateString.current}\n   331→            </Text>\n   332→          </View>\n   333→          {settingShowFlags && (\n   334→            <View style={styles.countryFlag}>\n   335→              <ExpenseCountryFlag\n   336→                countryName={country}\n   337→                style={GlobalStyles.countryFlagStyle}\n   338→                containerStyle={[\n   339→                  styles.countryFlagContainer,\n   340→                  GlobalStyles.shadow,\n   341→                ]}\n   342→              />\n   343→            </View>\n   344→          )}\n   345→          {settingShowWhoPaid && <View>{sharedList()}</View>}\n   346→          <View style={styles.amountContainer}>\n   347→            <Text\n   348→              style={[\n   349→                styles.amountText,\n   350→                hideSpecial && {\n   351→                  color: GlobalStyles.colors.errorHidden,\n   352→                },\n   353→              ]}\n   354→            >\n   355→              {calcAmountString}\n   356→            </Text>\n   357→            {originalCurrencyJSX}\n   358→          </View>\n   359→        </View>\n   360→      </Pressable>\n   361→    </View>\n   362→  );\n   363→}\n   364→\n   365→export const MemoizedExpenseItem = memo(ExpenseItem);\n   366→export default ExpenseItem;\n   367→\n   368→ExpenseItem.propTypes = {\n   369→  id: PropTypes.string.isRequired,\n   370→  description: PropTypes.string.isRequired,\n   371→  amount: PropTypes.number.isRequired,\n   372→  date: PropTypes.object.isRequired,\n   373→  category: PropTypes.string.isRequired,\n   374→  country: PropTypes.string,\n   375→  whoPaid: PropTypes.string.isRequired,\n   376→  currency: PropTypes.string.isRequired,\n   377→  calcAmount: PropTypes.number.isRequired,\n   378→  splitList: PropTypes.array,\n   379→  iconName: PropTypes.string,\n   380→  showSumForTravellerName: PropTypes.string,\n   381→  filtered: PropTypes.bool,\n   382→  isSpecialExpense: PropTypes.bool,\n   383→  setSelectable: PropTypes.func,\n   384→};\n   385→\n   386→const styles = StyleSheet.create({\n   387→  pressed: {\n   388→    opacity: 0.75,\n   389→  },\n   390→  expenseItem: {\n   391→    borderColor: \"black\",\n   392→    paddingRight: 0,\n   393→    marginLeft: 0,\n   394→    backgroundColor: GlobalStyles.colors.backgroundColor,\n   395→    flexDirection: \"row\",\n   396→    justifyContent: \"space-between\",\n   397→  },\n   398→  textBase: {\n   399→    marginTop: dynamicScale(2, true),\n   400→    marginLeft: dynamicScale(4),\n   401→    color: GlobalStyles.colors.textColor,\n   402→  },\n   403→  description: {\n   404→    // flex: 1,\n   405→    // width: \"110%\",\n   406→    fontStyle: \"italic\",\n   407→    fontWeight: \"300\",\n   408→    fontSize: dynamicScale(15, false, 0.5),\n   409→    zIndex: 2,\n   410→    numberOfLines: 1,\n   411→    ellipsizeMode: \"tail\",\n   412→  },\n   413→  secondaryText: {\n   414→    color: GlobalStyles.colors.gray700,\n   415→    fontSize: dynamicScale(13, false, 0.5),\n   416→    zIndex: 1,\n   417→  },\n   418→  iconContainer: {\n   419→    marginTop: dynamicScale(4, true),\n   420→    marginRight: dynamicScale(8),\n   421→    marginLeft: 0,\n   422→  },\n   423→  leftItem: {\n   424→    flex: 1,\n   425→    height: constantScale(40, 0.5),\n   426→    alignContent: \"flex-start\",\n   427→    justifyContent: \"flex-start\",\n   428→    alignItems: \"flex-start\",\n   429→  },\n   430→  amountContainer: {\n   431→    paddingHorizontal: dynamicScale(4),\n   432→    paddingVertical: 0,\n   433→    backgroundColor: GlobalStyles.colors.backgroundColor,\n   434→    justifyContent: \"center\",\n   435→    alignItems: \"center\",\n   436→    borderRadius: 4,\n   437→    width: constantScale(150, 0.5),\n   438→    height: constantScale(40, 0.5),\n   439→  },\n   440→  amountText: {\n   441→    textAlign: \"center\",\n   442→    fontSize: dynamicScale(20, false, 0.5),\n   443→    fontWeight: \"300\",\n   444→    color: GlobalStyles.colors.error300,\n   445→  },\n   446→\n   447→  originalCurrencyText: {\n   448→    fontSize: dynamicScale(12, false, 0.5),\n   449→    textAlign: \"center\",\n   450→    fontWeight: \"300\",\n   451→  },\n   452→  countryFlagContainer: {\n   453→    marginRight: dynamicScale(4),\n   454→    height: constantScale(40),\n   455→    width: constantScale(50),\n   456→  },\n   457→  countryFlag: {\n   458→    marginTop: dynamicScale(3, true),\n   459→    // marginRight: 12,\n   460→  },\n   461→  avatarContainer: {\n   462→    padding: dynamicScale(4),\n   463→    paddingRight: dynamicScale(10),\n   464→    // center items left\n   465→    flexDirection: \"row\",\n   466→    height: constantScale(30, 1),\n   467→    width: constantScale(55),\n   468→  },\n   469→  avatar: {\n   470→    marginRight: dynamicScale(-6),\n   471→    height: constantScale(20, 0.5),\n   472→    width: constantScale(20, 0.5),\n   473→    borderRadius: 60,\n   474→    borderWidth: dynamicScale(1, false, 0.5),\n   475→    borderColor: GlobalStyles.colors.primaryGrayed,\n   476→    backgroundColor: GlobalStyles.colors.gray500,\n   477→    alignItems: \"center\",\n   478→    justifyContent: \"center\",\n   479→    ...Platform.select({\n   480→      android: {\n   481→        minHeight: constantScale(20, 0.5),\n   482→        minWidth: constantScale(20, 0.5),\n   483→      },\n   484→    }),\n   485→  },\n   486→  avatarPaid: {\n   487→    // borderWidth: 2,\n   488→    borderColor: GlobalStyles.colors.primary700,\n   489→  },\n   490→  avatarText: {\n   491→    fontSize: dynamicScale(14, false, 0.5),\n   492→    fontWeight: \"bold\",\n   493→    color: GlobalStyles.colors.primary700,\n   494→  },\n   495→});\n   496→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
      }
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "tool_use_id": "toolu_01ANUqkZz5pv2khdi2DFYP5o",
        "type": "tool_result",
        "content": "     1→import { StyleSheet, Text, View } from \"react-native\";\n     2→import React from \"react\";\n     3→import ExpenseForm from \"../components/ManageExpense/ExpenseForm\";\n     4→\n     5→const ManageMultipleExpenses = () => {\n     6→  // TODO: adapt functions to update multiple expenses from ManageExpense.tsx and call ExpenseForm with a multipleExpenses Flag\n     7→  // TODO: find out what fields all expenses have in common and set them as default Values\n     8→  return (\n     9→    <View>\n    10→      {/* <ExpenseForm\n    11→      onCancel={cancelHandler}\n    12→      onSubmit={confirmHandler}\n    13→      setIsSubmitting={setIsSubmitting}\n    14→      pickedCat={pickedCat}\n    15→      iconName={iconName}\n    16→      navigation={navigation}\n    17→      isEditing={isEditing}\n    18→      submitButtonLabel={isEditing ? i18n.t(\"update\") : i18n.t(\"add\")}\n    19→      defaultValues={tempValues ?? selectedExpense}\n    20→      editedExpenseId={editedExpenseId}\n    21→      newCat={newCat}> */}\n    22→    </View>\n    23→  );\n    24→};\n    25→\n    26→export default ManageMultipleExpenses;\n    27→\n    28→const styles = StyleSheet.create({});\n    29→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
      }
    ]
  },
  {
    "role": "user",
    "content": [
      {
        "tool_use_id": "toolu_01DXSpq5CinzeykX1yGT8jZh",
        "type": "tool_result",
        "content": "     1→/* eslint-disable @typescript-eslint/no-empty-function */\n     2→/* eslint-disable @typescript-eslint/no-unused-vars */\n     3→import React, { createContext, useEffect, useReducer } from \"react\";\n     4→import {\n     5→  getDateMinusDays,\n     6→  getDatePlusDays,\n     7→  getPreviousMondayDate,\n     8→} from \"../util/date\";\n     9→import PropTypes from \"prop-types\";\n    10→import { ExpenseData } from \"../util/expense\";\n    11→import uniqBy from \"lodash.uniqby\";\n    12→import { getMMKVObject, setMMKVObject } from \"./mmkv\";\n    13→export enum RangeString {\n    14→  day = \"day\",\n    15→  week = \"week\",\n    16→  month = \"month\",\n    17→  year = \"year\",\n    18→  total = \"total\",\n    19→}\n    20→\n    21→export type ExpenseContextType = {\n    22→  expenses: Array<ExpenseData>;\n    23→  addExpense: (\n    24→    {\n    25→      uid,\n    26→      description,\n    27→      amount,\n    28→      date,\n    29→      startDate,\n    30→      endDate,\n    31→      category,\n    32→      country,\n    33→      currency,\n    34→      whoPaid,\n    35→      calcAmount,\n    36→      iconName,\n    37→    }: ExpenseData,\n    38→    id?: string\n    39→  ) => void;\n    40→  setExpenses: (expenses: Array<ExpenseData>) => void;\n    41→  deleteExpense: (id: string) => void;\n    42→  updateExpense: (\n    43→    id: string,\n    44→    {\n    45→      description,\n    46→      amount,\n    47→      date,\n    48→      category,\n    49→      country,\n    50→      currency,\n    51→      whoPaid,\n    52→      calcAmount,\n    53→      iconName,\n    54→    }: ExpenseData\n    55→  ) => void;\n    56→  getRecentExpenses: (rangestring: RangeString) => Array<ExpenseData>;\n    57→  getYearlyExpenses: (yearsBack: number) => {\n    58→    firstDay: Date;\n    59→    lastDay: Date;\n    60→    yearlyExpenses: Array<ExpenseData>;\n    61→  };\n    62→  getMonthlyExpenses: (monthsBack: number) => {\n    63→    firstDay: Date;\n    64→    lastDay: Date;\n    65→    monthlyExpenses: Array<ExpenseData>;\n    66→  };\n    67→  getWeeklyExpenses: (weeksBack: number) => {\n    68→    firstDay: Date;\n    69→    lastDay: Date;\n    70→    weeklyExpenses: Array<ExpenseData>;\n    71→  };\n    72→  getDailyExpenses: (daysBack: number) => Array<ExpenseData>;\n    73→  getSpecificDayExpenses: (date: Date) => Array<ExpenseData>;\n    74→  getSpecificWeekExpenses: (date: Date) => Array<ExpenseData>;\n    75→  getSpecificMonthExpenses: (date: Date) => Array<ExpenseData>;\n    76→  getSpecificYearExpenses: (date: Date) => Array<ExpenseData>;\n    77→  loadExpensesFromStorage: (forceLoad?: boolean) => Promise<boolean>;\n    78→};\n    79→\n    80→export const ExpensesContext = createContext({\n    81→  expenses: [],\n    82→  addExpense: (\n    83→    {\n    84→      uid,\n    85→      description,\n    86→      amount,\n    87→      date,\n    88→      startDate,\n    89→      endDate,\n    90→      category,\n    91→      country,\n    92→      currency,\n    93→      whoPaid,\n    94→      calcAmount,\n    95→      iconName,\n    96→    }: ExpenseData,\n    97→    id?: string\n    98→  ) => {},\n    99→  setExpenses: (expenses) => {},\n   100→  deleteExpense: (id) => {},\n   101→  updateExpense: (\n   102→    id,\n   103→    {\n   104→      description,\n   105→      amount,\n   106→      date,\n   107→      category,\n   108→      country,\n   109→      currency,\n   110→      whoPaid,\n   111→      calcAmount,\n   112→      iconName,\n   113→    }: ExpenseData\n   114→  ) => {},\n   115→  getRecentExpenses: (rangestring: RangeString): Array<ExpenseData> => {\n   116→    return [];\n   117→  },\n   118→  getYearlyExpenses: (yearsBack) => {\n   119→    // firstDay, lastDay, yearlyExpenses;\n   120→    return {\n   121→      firstDay: new Date(),\n   122→      lastDay: new Date(),\n   123→      yearlyExpenses: [],\n   124→    };\n   125→  },\n   126→  getMonthlyExpenses: (monthsBack) => {\n   127→    // firstDay, lastDay, monthlyExpenses;\n   128→    return {\n   129→      firstDay: new Date(),\n   130→      lastDay: new Date(),\n   131→      monthlyExpenses: [],\n   132→    };\n   133→  },\n   134→  getWeeklyExpenses: (weeksBack) => {\n   135→    // firstDay, lastDay, weeklyExpenses;\n   136→    return {\n   137→      firstDay: new Date(),\n   138→      lastDay: new Date(),\n   139→      weeklyExpenses: [],\n   140→    };\n   141→  },\n   142→  getDailyExpenses: (daysBack): Array<ExpenseData> => {\n   143→    return [];\n   144→  },\n   145→  getSpecificDayExpenses: (date): Array<ExpenseData> => {\n   146→    return [];\n   147→  },\n   148→  getSpecificWeekExpenses: (date): Array<ExpenseData> => {\n   149→    return [];\n   150→  },\n   151→  getSpecificMonthExpenses: (date): Array<ExpenseData> => {\n   152→    return [];\n   153→  },\n   154→  getSpecificYearExpenses: (date): Array<ExpenseData> => {\n   155→    return [];\n   156→  },\n   157→\n   158→  loadExpensesFromStorage: async () => {},\n   159→});\n   160→\n   161→function expensesReducer(state: ExpenseData[], action) {\n   162→  switch (action.type) {\n   163→    case \"ADD\":\n   164→      return [action.payload, ...state];\n   165→    case \"SET\": {\n   166→      const getSortedState = (data: ExpenseData[]) =>\n   167→        data.sort((a: ExpenseData, b: ExpenseData) => {\n   168→          return Number(new Date(b.date)) - Number(new Date(a.date));\n   169→        });\n   170→\n   171→      const sorted = uniqBy(getSortedState(action.payload), \"id\");\n   172→      return sorted;\n   173→    }\n   174→    case \"UPDATE\": {\n   175→      const updatableExpenseIndex = state.findIndex(\n   176→        (expense) => expense.id === action.payload.id\n   177→      );\n   178→      const updatableExpense = state[updatableExpenseIndex];\n   179→      const updatedItem = { ...updatableExpense, ...action.payload.data };\n   180→      const updatedExpenses = [...state];\n   181→      updatedExpenses[updatableExpenseIndex] = updatedItem;\n   182→      return updatedExpenses;\n   183→    }\n   184→    case \"DELETE\":\n   185→      return state.filter((expense) => expense.id !== action.payload);\n   186→    default:\n   187→      return state;\n   188→  }\n   189→}\n   190→\n   191→function ExpensesContextProvider({ children }) {\n   192→  const [expensesState, dispatch] = useReducer(expensesReducer, []);\n   193→\n   194→  useEffect(() => {\n   195→    async function asyncLoadExpenses() {\n   196→      // console.log(\"-----------------\\n first time load\");\n   197→      await loadExpensesFromStorage(true);\n   198→    }\n   199→    asyncLoadExpenses();\n   200→  }, []);\n   201→\n   202→  useEffect(() => {\n   203→    // save expenseState in async\n   204→    // // console.log(\"saving expenses\");\n   205→    async function asyncSaveExpenses() {\n   206→      if (expensesState?.length > 0)\n   207→        // await asyncStoreSetObject(\"expenses\", expensesState);\n   208→        setMMKVObject(\"expenses\", expensesState);\n   209→    }\n   210→    asyncSaveExpenses();\n   211→  }, [expensesState]);\n   212→\n   213→  function addExpense(expenseData: ExpenseData, id?: string) {\n   214→    if (!id) id = new Date().getTime().toString();\n   215→    if (!expenseData.id) expenseData.id = id;\n   216→    dispatch({ type: \"ADD\", payload: expenseData });\n   217→  }\n   218→\n   219→  function setExpenses(expenses: ExpenseData[]) {\n   220→    dispatch({ type: \"SET\", payload: expenses });\n   221→  }\n   222→\n   223→  function deleteExpense(id: string) {\n   224→    dispatch({ type: \"DELETE\", payload: id });\n   225→  }\n   226→\n   227→  function updateExpense(id: string, expenseData: ExpenseData) {\n   228→    dispatch({ type: \"UPDATE\", payload: { id: id, data: expenseData } });\n   229→  }\n   230→\n   231→  function getRecentExpenses(rangestring: RangeString) {\n   232→    let expenses = [];\n   233→    switch (rangestring) {\n   234→      case \"day\":\n   235→        return getDailyExpenses(0);\n   236→      case \"week\":\n   237→        expenses = getWeeklyExpenses(0).weeklyExpenses;\n   238→        return expenses;\n   239→      case \"month\":\n   240→        expenses = getMonthlyExpenses(0).monthlyExpenses;\n   241→        return expenses;\n   242→      case \"year\":\n   243→        expenses = getYearlyExpenses(0).yearlyExpenses;\n   244→        return expenses;\n   245→      case \"total\":\n   246→        return expensesState;\n   247→\n   248→      default:\n   249→        return expensesState;\n   250→    }\n   251→  }\n   252→  function getYearlyExpenses(yearsBack: number) {\n   253→    /*\n   254→     *  Returns an object containing the first date, last date of a month and\n   255→     *  the expenses in that range.\n   256→     *  returns {firstDay, lastDay, yearlyExpenses}\n   257→     */\n   258→    const daysBefore = yearsBack * 365;\n   259→    const today = new Date();\n   260→\n   261→    const dayBack = getDateMinusDays(today, daysBefore);\n   262→\n   263→    const firstDay = new Date(dayBack.getFullYear(), dayBack.getMonth() - 1, 1);\n   264→\n   265→    const lastDay = new Date(\n   266→      dayBack.getFullYear() + 1,\n   267→      dayBack.getMonth() - 1,\n   268→      0\n   269→    );\n   270→    const yearlyExpenses = expensesState.filter((expense) => {\n   271→      return expense.date >= firstDay && expense.date <= lastDay;\n   272→    });\n   273→    return { firstDay, lastDay, yearlyExpenses };\n   274→  }\n   275→  function getMonthlyExpenses(monthsBack: number) {\n   276→    /*\n   277→     *  Returns an object containing the first date, last date of a month and\n   278→     *  the expenses in that range.\n   279→     *  returns {firstDay, lastDay, monthlyExpenses}\n   280→     */\n   281→    const daysBefore = monthsBack * 30;\n   282→    const today = new Date();\n   283→\n   284→    const dayBack = getDateMinusDays(today, daysBefore);\n   285→\n   286→    const firstDay = new Date(dayBack.getFullYear(), dayBack.getMonth(), 1);\n   287→\n   288→    const lastDay = new Date(dayBack.getFullYear(), dayBack.getMonth() + 1, 0);\n   289→\n   290→    const monthlyExpenses = expensesState.filter((expense) => {\n   291→      return expense.date >= firstDay && expense.date <= lastDay;\n   292→    });\n   293→    return { firstDay, lastDay, monthlyExpenses };\n   294→  }\n   295→  function getWeeklyExpenses(weeksBack: number) {\n   296→    /*\n   297→     *  Returns an object containing the first date, last date of a month and\n   298→     *  the expenses in that range.\n   299→     *  returns {firstDay, lastDay, weeklyExpenses}\n   300→     */\n   301→    const daysBefore = weeksBack * 7;\n   302→    const today = new Date();\n   303→\n   304→    const dayBack = getDateMinusDays(today, daysBefore);\n   305→    const prevMonday = getPreviousMondayDate(dayBack);\n   306→    const firstDay = prevMonday;\n   307→    const lastDay = getDatePlusDays(prevMonday, 6);\n   308→    const weeklyExpenses = expensesState.filter((expense) => {\n   309→      return expense.date >= firstDay && expense.date <= lastDay;\n   310→    });\n   311→    return { firstDay, lastDay, weeklyExpenses };\n   312→  }\n   313→  function getDailyExpenses(daysBack: number) {\n   314→    const today = new Date();\n   315→    const dayBack = getDateMinusDays(today, daysBack);\n   316→    const dayExpenses = expensesState.filter((expense) => {\n   317→      return expense.date.toDateString() === dayBack.toDateString();\n   318→    });\n   319→    return dayExpenses;\n   320→  }\n   321→\n   322→  function getSpecificDayExpenses(date) {\n   323→    const dayExpenses = expensesState.filter((expense) => {\n   324→      return expense.date.toDateString() === date.toDateString();\n   325→    });\n   326→    return dayExpenses;\n   327→  }\n   328→\n   329→  function getSpecificWeekExpenses(date) {\n   330→    const prevMonday = getPreviousMondayDate(date);\n   331→    const firstDay = prevMonday;\n   332→    const lastDay = getDatePlusDays(prevMonday, 6);\n   333→    const weeklyExpenses = expensesState.filter((expense) => {\n   334→      return expense.date >= firstDay && expense.date <= lastDay;\n   335→    });\n   336→    return weeklyExpenses;\n   337→  }\n   338→\n   339→  function getSpecificMonthExpenses(date) {\n   340→    const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n   341→\n   342→    const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n   343→\n   344→    const monthlyExpenses = expensesState.filter((expense) => {\n   345→      return expense.date >= firstDay && expense.date <= lastDay;\n   346→    });\n   347→    return monthlyExpenses;\n   348→  }\n   349→\n   350→  function getSpecificYearExpenses(date) {\n   351→    const firstDay = new Date(date.getFullYear(), 0, 1);\n   352→\n   353→    const lastDay = new Date(date.getFullYear(), 11, 31);\n   354→\n   355→    const yearlyExpenses = expensesState.filter((expense) => {\n   356→      return expense.date >= firstDay && expense.date <= lastDay;\n   357→    });\n   358→    return yearlyExpenses;\n   359→  }\n   360→\n   361→  async function loadExpensesFromStorage(forceLoad = false) {\n   362→    if (!forceLoad && expensesState?.length !== 0) {\n   363→      // // console.log(\"expenses not empty, will not load again\");\n   364→      return false;\n   365→    }\n   366→    // const loadedExpenses = await asyncStoreGetObject(\"expenses\");\n   367→    const loadedExpenses = getMMKVObject(\"expenses\");\n   368→    // // console.log(\n   369→    //   \"loadExpensesFromStorage ~ loadedExpenses:\",\n   370→    //   loadedExpenses?.length\n   371→    // );\n   372→    const expArray = [];\n   373→    if (loadedExpenses) {\n   374→      loadedExpenses.forEach((expense) => {\n   375→        expense.date = new Date(expense.date);\n   376→        expense.startDate = new Date(expense.startDate);\n   377→        expense.endDate = new Date(expense.endDate);\n   378→        expArray.push(expense);\n   379→      });\n   380→      setExpenses(expArray);\n   381→      // // console.log(\"loadExpensesFromStorage ~ expArray:\", expArray);\n   382→    } else {\n   383→      // // console.log(\"no Expenses loaded from Storage!\");\n   384→    }\n   385→    return true;\n   386→  }\n   387→\n   388→  const value = {\n   389→    expenses: expensesState,\n   390→    addExpense: addExpense,\n   391→    setExpenses: setExpenses,\n   392→    deleteExpense: deleteExpense,\n   393→    updateExpense: updateExpense,\n   394→    getRecentExpenses: getRecentExpenses,\n   395→    getYearlyExpenses: getYearlyExpenses,\n   396→    getMonthlyExpenses: getMonthlyExpenses,\n   397→    getWeeklyExpenses: getWeeklyExpenses,\n   398→    getDailyExpenses: getDailyExpenses,\n   399→    getSpecificDayExpenses: getSpecificDayExpenses,\n   400→    getSpecificWeekExpenses: getSpecificWeekExpenses,\n   401→    getSpecificMonthExpenses: getSpecificMonthExpenses,\n   402→    getSpecificYearExpenses: getSpecificYearExpenses,\n   403→    loadExpensesFromStorage: loadExpensesFromStorage,\n   404→  };\n   405→\n   406→  return (\n   407→    <ExpensesContext.Provider value={value}>\n   408→      {children}\n   409→    </ExpensesContext.Provider>\n   410→  );\n   411→}\n   412→\n   413→export default ExpensesContextProvider;\n   414→ExpensesContextProvider.propTypes = {\n   415→  children: PropTypes.node,\n   416→};\n   417→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"
      }
    ]
  }
]